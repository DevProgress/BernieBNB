c
User.last(4)
User.count
c
visit
Visit
c
geo.longitude
geo.latitude
geo
visit
c
results.first.state
results.first.city
results
obj
c
Visit.last.available_hostings(User.last)
Contact.all
c
Contact.all
c
Contact.all
available_hostings
c
available_hostings
c
available_hostings
c
visit.available_hostings(current_user).map { |hosting| hosting.contact_count }
c
visit.available_hostings(current_user).map { |hosting| hosting.contact_count }
visit.available_hostings(current_user)
c
visit.available_hostings(current_user)
c
hosting
c
s
visit.available_hostings(current_user)
visit.available_hostings
hosting
c
Visit.last.available_hostings(User.last)
c
Visit.last.available_hostings(User.last)
c
Visit.last.available_hostings(User.last)
Visit.last.available_hostings
Visit.last.available_hosts
Hosting.all
Hosting.find(Contact.last.hosting_id)
c
Hosting.find(hosting_id).contact_count
c
Hosting.find(hosting_id).contact_count
Hosting.find(hosting_id).increment(:contact_count).save
Hosting.exists?(id: hosting_id)
c
available_hostings
c
available_hostings
available_hosts
c
available_hostings
available_hosts
c
available_hostings.last.contacts
available_hostings.first.contacts
Hosting.find(2).contacts
c
Hosting.find(2).contacts
available_hostings.first.contacts
available_hostings.last.contacts
available_hostings
c
available_hostings
available_hostings.first.contacts
c
available_hostings.first.contacts
c
available_hostings.first.contacts
c
available_hostings.first.contacts
available_hostings.contacts
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
c
available_hostings
available_hostings.first
quit
zip.values
zip.keys
zip.key
coords
zip
quit
zip
c
cc
c
max_guests
nearby_visits = Visit.near(self, 25, order: "distance").where("num_travelers <= ?", max_guests)
nearby_visits = Visit.near(self, 25, order: "distance")
      .where("num_travelers <= ?", max_guests)
      .near(self, 25, order: "distance")
nearby_visits = Visit
Visit.near(self)
nearby_visits
Visit.all
c
n
Visit.all
nearby_visits
c
Hosting.near(Visit.first)
Hosting.all
Visit.all
c
Hosting.all
User.all
c
s
ss
s
User.all
c
n
s
auth["info"]["email"]
quit
@email
quit
continue
c
@user.email
c
auth["info"]["email"]
auth["info"]["email"] = "your_email@example.com"
c
auth["info"]["email"] = "whatever"
c
auth["info"]["email"]
auth["info"]["email"] = ""
auth["info"]["email"]
auth
c
open_last_email.body
open_last_email.decode_body
open_last_email.raw_source
open_last_email.public_methods
open_last_email.methods
open_last_email.body_text
open_last_email
open_last_email.body.raw_source
open_last_email.body.text
open_last_email.body
c
@hosting.host_id == current_user.id
@hosting.id == current_user.id
c
params
c
s
w
s
self.class.generate_secure_token
c
auth
c
auth
auth["info"]
c
auth
auth["info"]
auth["info"]["email"]
c
auth["info"]["email"]
c
auth["info"]["email"]
auth["info"]
c
auth["info"]
c
params[:user_id].to_i == current_user.id
params[:user_id] == current_user.id
c
params[:user_id].to_i == current_user.id
current_user.id
params[:user_id] == current_user.id
params[:user_id]
current_user
c
params[:user_id]
current_user
@user
c
current_user.id
params[:user_id]
quit
params[:user_id]
current_user.id
current_user
c
quit
c
@hosting.persisted?
@hosting
c
current_user
c
@visit.save
@visit
@visit.user_id = current_user.id
current_user.id
current_user
@visit
params
quit
params[:user_id]
params
c
user.visits.first.short_details
user.visits.first
c
n
starting
n
c
s
c
auth["info"]["email"]
auth["info"]
